import 'package:sucrose/src/xendit/enums/enums.dart';
import 'package:sucrose/src/xendit/models/entity/xendit_metadata.dart';

class XenditRefundRequest {
  /// Identifier for the corresponding [Payment Request](https://developers.xendit.co/api-reference/payments-api/#payment-request) to be refunded
  ///
  /// Note: One of payment_request_id or invoice_id must be provided in the request.
  final String? paymentRequestId;

  /// Identifier provided by the merchant for the refund request. This may be automatically generated by Xendit if it was not provided.
  ///
  /// Maximum length: 255 characters
  final String? referenceId;

  /// Identifier for the corresponding Invoice / Payment Link transaction to be refunded
  ///
  /// Note: One of payment_request_id or invoice_id must be provided in the request.
  final String? invoiceId;

  /// Three-letter ISO 4217 currency code of the transaction, in uppercase.
  final XenditRefundCurrency currency;

  /// Amount of the transaction reflecting the actual decimal places. (Ex. 1234.56 with currency PHP is one thousand thirty-four pesos and fifty-six centavos)
  ///
  /// Decimal places support varies per currency:
  ///
  /// IDR - Only supports whole numbers (can't support decimal number).
  ///
  /// PHP - Supports up to two decimal places.
  final double? amount;

  /// Provided reason why the refund was requested.
  final XenditRefundReason reason;

  /// User defined object with JSON properties and values passed in during Refund creation.
  final XenditMetadata? metadata;

  /// Object that contains the required information to perform refund
  ///
  /// Only supports select `EWALLET`, `DIRECT_DEBIT`, and `CARD` channels.
  XenditRefundRequest({
    this.paymentRequestId,
    this.referenceId,
    this.invoiceId,
    required this.currency,
    this.amount,
    required this.reason,
    this.metadata,
  });

  factory XenditRefundRequest.fromJson(Map<String, dynamic> json) =>
      XenditRefundRequest(
        paymentRequestId: json["payment_request_id"],
        referenceId: json["reference_id"],
        invoiceId: json["invoice_id"],
        currency: json["currency"],
        amount: json["amount"],
        reason: json["reason"],
        metadata: json["metadata"],
      );

  Map<String, dynamic> toJson() => {
        if (paymentRequestId != null) "payment_request_id": paymentRequestId,
        if (referenceId != null) "reference_id": referenceId,
        if (invoiceId != null) "invoice_id": invoiceId,
        if (amount != null) "amount": amount,
        "currency": currency.name,
        "reason": reason.name,
        if (metadata != null) "metadata": metadata!.toJson(),
      };
}
