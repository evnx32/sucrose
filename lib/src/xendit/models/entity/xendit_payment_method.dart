import 'package:sucrose/src/xendit/enums/enums.dart';
import 'package:sucrose/src/xendit/models/entity/xendit_card.dart';
import 'package:sucrose/src/xendit/models/entity/xendit_direct_debit.dart';
import 'package:sucrose/src/xendit/models/entity/xendit_ewallet.dart';
import 'package:sucrose/src/xendit/models/entity/xendit_metadata.dart';
import 'package:sucrose/src/xendit/models/entity/xendit_qr_code.dart';
import 'package:sucrose/src/xendit/models/entity/xendit_billing_information.dart';
import 'package:sucrose/src/xendit/models/entity/xendit_retail_outlet.dart';
import 'package:sucrose/src/xendit/models/entity/xendit_virtual_account.dart';

class XenditPaymentMethod {
  /// Unique identifier for the payment method. This has a prefix of pm-. Example: pm-6d1c8be4-f4d9-421c-9f0b-ab3b2b6bbc39
  final String? id;

  /// Type of payment method. Refer to the corresponding object to access further information
  final XenditPaymentMethodType type;

  ///Identifier provided by the merchant or automatically generated by Xendit if it was not provided.
  ///
  ///Maximum length: 255 characters
  final String? referenceId;

  /// Free-text field for any additional information regarding the payment method.
  ///
  ///Maximum length: 255 characters
  final String? description;

  /// ISO 8601 Timestamp for Payment Method object creation. Timezone UTC+0
  final DateTime? created;

  /// ISO 8601 Timestamp for Payment Method object last update. Timezone UTC+0
  final DateTime? updated;

  /// Card object containing information about the card used for the payment method.
  final XenditCard? card;

  /// Ewallet object containing information about the ewallet used for the payment method.
  final XenditEwallet? ewallet;

  /// Direct Debit object containing information about the direct debit used for the payment method.
  final XenditDirectDebit? directDebit;

  /// Direct Bank Transfer object containing information about the direct bank transfer used for the payment method.
  final dynamic directBankTransfer;

  /// Retail Outlet object containing information about the retail outlet used for the payment method.
  final XenditRetailOutlet? overTheCounter;

  /// Virtual Account object containing information about the virtual account used for the payment method.
  final XenditVirtualAccount? virtualAccount;

  /// QR Code object containing information about the QR code used for the payment method.
  final XenditQrCode? qrCode;

  /// Object containing key-value pairs of additional information that will be included in the response if present.
  ///
  /// This is optional, for more info, see https://developers.xendit.co/api-reference/
  final XenditMetadata? metadata;

  /// Billing information object containing information about the billing information used for the payment method.
  final XenditBillingInformation? billingInformation;

  /// Whether the payment method can be reused for future payments.
  final XenditReusablePaymentMethod reusability;

  /// The status of the payment method.
  final String? status;

  /// Object that contains the required information to perform payments.
  XenditPaymentMethod({
    this.id,
    required this.type,
    this.referenceId,
    this.description,
    this.created,
    this.updated,
    this.card,
    this.ewallet,
    this.directDebit,
    this.directBankTransfer,
    this.overTheCounter,
    this.virtualAccount,
    this.qrCode,
    this.metadata,
    this.billingInformation,
    required this.reusability,
    this.status,
  });

  factory XenditPaymentMethod.fromJson(Map<String, dynamic> json) =>
      XenditPaymentMethod(
        id: json["id"],
        type: XenditPaymentMethodType.values.firstWhere(
          (element) => element.name == json["type"],
        ),
        referenceId: json["reference_id"],
        description: json["description"],
        created:
            json["created"] == null ? null : DateTime.parse(json["created"]),
        updated:
            json["updated"] == null ? null : DateTime.parse(json["updated"]),
        card: json["card"] == null ? null : XenditCard.fromJson(json["card"]),
        ewallet: json["ewallet"] == null
            ? null
            : XenditEwallet.fromJson(json["ewallet"]),
        directDebit: json["direct_debit"] == null
            ? null
            : XenditDirectDebit.fromJson(json["direct_debit"]),
        directBankTransfer: json["direct_bank_transfer"],
        overTheCounter: json["over_the_counter"] == null
            ? null
            : XenditRetailOutlet.fromJson(json["over_the_counter"]),
        virtualAccount: json["virtual_account"] == null
            ? null
            : XenditVirtualAccount.fromJson(json["virtual_account"]),
        qrCode: json["qr_code"] == null
            ? null
            : XenditQrCode.fromJson(json["qr_code"]),
        metadata: json["metadata"] == null
            ? null
            : XenditMetadata.fromJson(json["metadata"]),
        billingInformation: json["billing_information"] == null
            ? null
            : XenditBillingInformation.fromJson(json["billing_information"]),
        reusability: XenditReusablePaymentMethod.values.firstWhere(
          (element) => element.name == json["reusability"],
        ),
        status: json["status"],
      );

  Map<String, dynamic> toJson() => {
        if (id != null) "id": id,
        "type": type.name,
        if (referenceId != null) "reference_id": referenceId,
        "description": description,
        if (created != null) "created": created?.toIso8601String(),
        if (updated != null) "updated": updated?.toIso8601String(),
        if (card != null) "card": card?.toJson(),
        if (ewallet != null) "ewallet": ewallet?.toJson(),
        if (directDebit != null) "direct_debit": directDebit?.toJson(),
        if (directBankTransfer != null)
          "direct_bank_transfer": directBankTransfer,
        if (overTheCounter != null)
          "over_the_counter": overTheCounter?.toJson(),
        if (virtualAccount != null) "virtual_account": virtualAccount?.toJson(),
        if (qrCode != null) "qr_code": qrCode?.toJson(),
        if (metadata != null) "metadata": metadata?.toJson(),
        if (billingInformation != null)
          "billing_information": billingInformation?.toJson(),
        "reusability": reusability.name,
        if (status != null) "status": status,
      };
}
